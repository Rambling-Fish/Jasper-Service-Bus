package org.jasper.core.delegate.handlers;

import static org.mockito.Mockito.when;

import javax.jms.Destination;
import javax.jms.TextMessage;

import junit.framework.TestCase;

import org.jasper.core.UDE;
import org.jasper.core.constants.JasperConstants;
import org.jasper.core.delegate.Delegate;
import org.jasper.core.delegate.DelegateOntology;
import org.junit.After;
import org.junit.Before;
//
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
//
public class TestSparqlHandler extends TestCase {
	
	private SparqlHandler classUnderTest;
	@Mock private UDE mockUDE;
	@Mock private Delegate mockDelegate;
	@Mock private TextMessage mockRequest;
	@Mock private TextMessage mockResp;
	@Mock private Destination mockDest;
	@Mock private DelegateOntology mockOntology;
	private String corrID = "1234";
	private String errorResp = "{400: Bad Request, msg : Invalid request received - request is null or empty string, version : 2.1}";
	private String validResp = "{200: OK, msg : Valid query, version : 2.1}";
	private String deploymentAndInstance = "UDE:0";
	private String msgText  = "{\"version\":\"1.0\",\"method\":\"GET\",\"ruri\":\"sparql\",\"headers\":{\"content-type\":\"application/json\"},\"parameters\":{},\"payload\":[113,117,101,114,121,61,80,82,69,70,73,88,37,50,48,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,118,111,99,97,98,117,108,97,114,121,37,50,70,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,114,100,102,115,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,119,51,46,111,114,103,37,50,70,50,48,48,48,37,50,70,48,49,37,50,70,114,100,102,45,115,99,104,101,109,97,37,50,51,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,106,116,97,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,118,111,99,97,98,117,108,97,114,121,37,50,70,106,116,97,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,112,97,114,97,109,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,118,111,99,97,98,117,108,97,114,121,37,50,70,112,97,114,97,109,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,120,115,100,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,119,51,46,111,114,103,37,50,70,50,48,48,49,37,50,70,88,77,76,83,99,104,101,109,97,37,50,51,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,111,119,108,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,119,51,46,111,114,103,37,50,70,50,48,48,50,37,50,70,48,55,37,50,70,111,119,108,37,50,51,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,114,100,102,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,119,51,46,111,114,103,37,50,70,49,57,57,57,37,50,70,48,50,37,50,70,50,50,45,114,100,102,45,115,121,110,116,97,120,45,110,115,37,50,51,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,112,114,111,118,105,100,101,115,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,118,111,99,97,98,117,108,97,114,121,37,50,70,112,114,111,118,105,100,101,115,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,106,97,115,112,101,114,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,100,116,97,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,50,48,49,52,37,50,70,48,49,37,50,70,100,116,97,37,50,51,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,114,101,113,117,105,114,101,115,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,118,111,99,97,98,117,108,97,114,121,37,50,70,114,101,113,117,105,114,101,115,37,51,69,37,48,65,83,69,76,69,67,84,37,50,48,37,51,70,100,116,97,37,50,48,87,72,69,82,69,37,50,48,37,48,65,37,50,48,37,50,48,37,50,48,37,55,66,37,48,65,37,50,48,37,50,48,37,50,48,37,50,48,37,50,48,37,50,48,37,51,70,100,116,97,37,50,48,37,50,48,97,37,50,48,37,50,48,100,116,97,37,51,65,68,84,65,37,50,48,37,50,48,46,37,48,65,37,50,48,37,50,48,37,50,48,37,55,68,111,117,116,112,117,116,61,106,115,111,110]}";
	private String msgText2  = "{\"version\":\"1.0\",\"method\":\"GET\",\"ruri\":\"sparql\",\"headers\":{\"content-type\":\"application/json\"},\"parameters\":{},\"payload\":[113,117,101,114,121,61,80,82,69,70,73,88,37,50,48,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,118,111,99,97,98,117,108,97,114,121,37,50,70,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,114,100,102,115,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,119,51,46,111,114,103,37,50,70,50,48,48,48,37,50,70,48,49,37,50,70,114,100,102,45,115,99,104,101,109,97,37,50,51,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,106,116,97,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,118,111,99,97,98,117,108,97,114,121,37,50,70,106,116,97,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,112,97,114,97,109,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,118,111,99,97,98,117,108,97,114,121,37,50,70,112,97,114,97,109,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,120,115,100,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,119,51,46,111,114,103,37,50,70,50,48,48,49,37,50,70,88,77,76,83,99,104,101,109,97,37,50,51,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,111,119,108,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,119,51,46,111,114,103,37,50,70,50,48,48,50,37,50,70,48,55,37,50,70,111,119,108,37,50,51,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,114,100,102,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,119,119,119,46,119,51,46,111,114,103,37,50,70,49,57,57,57,37,50,70,48,50,37,50,70,50,50,45,114,100,102,45,115,121,110,116,97,120,45,110,115,37,50,51,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,112,114,111,118,105,100,101,115,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,118,111,99,97,98,117,108,97,114,121,37,50,70,112,114,111,118,105,100,101,115,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,106,97,115,112,101,114,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,100,116,97,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,50,48,49,52,37,50,70,48,49,37,50,70,100,116,97,37,50,51,37,51,69,37,48,65,80,82,69,70,73,88,37,50,48,114,101,113,117,105,114,101,115,37,51,65,37,50,48,37,51,67,104,116,116,112,37,51,65,37,50,70,37,50,70,99,111,114,97,108,99,101,97,46,99,97,37,50,70,106,97,115,112,101,114,37,50,70,118,111,99,97,98,117,108,97,114,121,37,50,70,114,101,113,117,105,114,101,115,37,51,69,37,48,65,83,69,76,69,67,84,37,50,48,37,51,70,100,116,97,37,50,48,87,72,69,82,69,37,50,48,37,48,65,37,50,48,37,50,48,37,50,48,37,55,66,37,48,65,37,50,48,37,50,48,37,50,48,37,50,48,37,50,48,37,50,48,37,51,70,100,116,97,37,50,48,37,50,48,97,37,50,48,37,50,48,100,116,97,37,51,65,68,84,65,37,50,48,37,50,48,46,37,48,65,37,50,48,37,50,48,37,50,48,37,55,68,111,117,116,112,117,116,61,106,115,110]}";

	/*
	 * This tests the Sparql Handler error handling
	 */
	@Test
	public void testNullQuery() throws Exception{
		System.out.println("============================");
		System.out.println("RUNNING SPARQL HANDLER TESTS");
		System.out.println("============================");
		when(mockDelegate.createJasperResponse(JasperConstants.responseCodes.BADREQUEST, "Invalid SPARQL query received", null, null, null)).thenReturn(errorResp);
		when(mockDelegate.createTextMessage(errorResp)).thenReturn(mockResp);
		
		
		classUnderTest.run();	
	}
	
	/*
	 * This tests the Sparql Handler error handling
	 */
	@Test
	public void testInvalidOutput() throws Exception{
		when(mockDelegate.createJasperResponse(JasperConstants.responseCodes.BADREQUEST, "Invalid SPARQL query received", null, null, null)).thenReturn(errorResp);
		when(mockDelegate.createTextMessage(errorResp)).thenReturn(mockResp);
		when(mockRequest.getText()).thenReturn(msgText2);
		
		
		classUnderTest.run();	
	}
	
	/*
	 * This tests the Sparql Handler processing a valid query
	 */
	@Test
	public void testValidQuery() throws Exception{
		when(mockDelegate.createJasperResponse(JasperConstants.responseCodes.OK, "Success", null, "application/json", "1.0")).thenReturn(validResp);
		when(mockDelegate.createTextMessage(validResp)).thenReturn(mockResp);
		when(mockRequest.getText()).thenReturn(msgText);
		
		
		classUnderTest.run();	
	}
	
	/*
	 * This tests the Sparql Handler processing a valid query
	 */
	@Test
	public void testValidQueryNoCorrID() throws Exception{
		when(mockDelegate.createJasperResponse(JasperConstants.responseCodes.OK, "Success", null, "application/json", "1.0")).thenReturn(validResp);
		when(mockDelegate.createTextMessage(validResp)).thenReturn(mockResp);
		when(mockRequest.getText()).thenReturn(msgText);
		when(mockRequest.getJMSMessageID()).thenReturn(corrID);
		when(mockRequest.getJMSCorrelationID()).thenReturn(null);
		
		
		classUnderTest.run();	
	}
	

	@Before
	public void setUp() throws Exception {
		MockitoAnnotations.initMocks(this);
		System.setProperty("delegate-property-file", "../zipRoot/jsb-core/config/delegate.properties");
		when(mockRequest.getJMSCorrelationID()).thenReturn(corrID);
		when(mockRequest.getJMSReplyTo()).thenReturn(mockDest);
		when(mockUDE.getUdeDeploymentAndInstance()).thenReturn(deploymentAndInstance);
		 
		classUnderTest = new SparqlHandler(mockDelegate, mockOntology, mockRequest); 
	}

	@After
	public void tearDown() throws Exception {
		classUnderTest = null;
		}
	
}
